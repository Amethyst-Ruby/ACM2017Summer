poj 2823
B - Sliding Window
Time Limit:12000MS     Memory Limit:65536KB     64bit IO Format:%I64d & %I64u
Submit
 
Status
  use MathJax to parse formulas
Description
An array of size n â‰¤ 10 6 is given to you. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves rightwards by one position. Following is an example: 
The array is [1 3 -1 -3 5 3 6 7], and k is 3.
Window position	Minimum value	Maximum value
[1  3  -1] -3  5  3  6  7 	-1	3
 1 [3  -1  -3] 5  3  6  7 	-3	3
 1  3 [-1  -3  5] 3  6  7 	-3	5
 1  3  -1 [-3  5  3] 6  7 	-3	5
 1  3  -1  -3 [5  3  6] 7 	3	6
 1  3  -1  -3  5 [3  6  7]	3	7
Your task is to determine the maximum and minimum values in the sliding window at each position. 

Input
The input consists of two lines. The first line contains two integers n and k which are the lengths of the array and the sliding window. There are n integers in the second line. 
Output
There are two lines in the output. The first line gives the minimum values in the window at each position, from left to right, respectively. The second line gives the maximum values. 
Sample Input
8 3
1 3 -1 -3 5 3 6 7
Sample Output
-1 -3 -3 -3 3 3
3 3 5 5 6 7




#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<string.h>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include<vector>
#include <cmath>
using namespace std;

#define INF 0x3f3f3f3f
#define maxn 1000005
int a[maxn],q[maxn];
int n,k;

void Monotone_Queue(int op)
{
    memset (q,0,sizeof(q));
    bool first = true;
    int head = 1;
    int tail = 0;
    for(int i = 1; i <= n;i++)
    {
        while(head <= tail && ( (!op && a[i] <= a[ q[tail] ]) || (op && a[i] >= a[q [tail] ] ) ) )
            tail --;
        q[++tail] = i;
        while( head <= tail && q[tail] - q[head] >= k )
            head ++;
        if( i >= k) first ? cout << a[q[head]] : cout<<' '<<a[q[head]],first = false;
    }
    cout<<endl;
}

int main()
{
    scanf("%d%d",&n,&k);
    for(int i = 1 ;i <= n ;i++)
    {
        scanf("%d",&a[i]);
    }
    Monotone_Queue(0);
    Monotone_Queue(1);
    return 0;
}

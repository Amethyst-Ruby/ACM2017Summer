POJ 3660
Cow Contest
Time Limit: 1000MS		Memory Limit: 65536K
Total Submissions: 12140		Accepted: 6745
Description

N (1 ≤ N ≤ 100) cows, conveniently numbered 1..N, are participating in a programming contest. As we all know, some cows code better than others. Each cow has a certain constant skill rating that is unique among the competitors.

The contest is conducted in several head-to-head rounds, each between two cows. If cow A has a greater skill level than cow B (1 ≤ A ≤ N; 1 ≤ B ≤ N; A ≠ B), then cow A will always beat cow B.

Farmer John is trying to rank the cows by skill level. Given a list the results of M (1 ≤ M ≤ 4,500) two-cow rounds, determine the number of cows whose ranks can be precisely determined from the results. It is guaranteed that the results of the rounds will not be contradictory.

Input

* Line 1: Two space-separated integers: N and M
* Lines 2..M+1: Each line contains two space-separated integers that describe the competitors and results (the first integer, A, is the winner) of a single round of competition: A and B

Output

* Line 1: A single integer representing the number of cows whose ranks can be determined
　

Sample Input

5 5
4 3
4 2
3 2
1 2
2 5
Sample Output

2


//思路：1个牛,跟所有的牛除了他本身都有关系；if(map[i][k]&&map[k][j]) map[i][k];   [1][2] [2][5] 就把[1][5]改了；
/到后来判断每个牛跟其他的牛的关系的个数是不是n-1就好！！

#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<string.h>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include<vector>
#include <cmath>
using namespace std;

#define INF 0x3f3f3f3f
#define maxn 120

int map[maxn][maxn];
int N,M;

void Floyd()
{
    for(int k=1; k<=N; k++)
        for(int i=1; i<=N; i++)
            for(int j=1; j<=N; j++)
                if(map[i][k] && map[k][j])    
                    map[i][j]=1;
}

void initialization()
{
    memset(map,0,sizeof(map));
    int a,b;
    for(int i = 1;i <= M;i++)
        {
                scanf("%d%d",&a,&b);
                map[a][b]=1;
        }
}
int main()
{
        scanf("%d%d",&N,&M);
        initialization();
        Floyd();
        int count = 0;
        for(int i = 1;i <= N;i++)
         {
                 int sum=0;
                 for(int j = 1;j <=N;j++)
                {
                        if(map[i][j]||map[j][i])  sum++;
                }
                if(sum==N-1) count ++;
         }
        cout<<count<<endl;
        return 0;
}

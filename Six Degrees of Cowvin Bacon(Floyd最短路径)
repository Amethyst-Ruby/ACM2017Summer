poj2139

The cows have been making movies lately, so they are ready to play a variant of the famous game "Six Degrees of Kevin Bacon". 

The game works like this: each cow is considered to be zero degrees of separation (degrees) away from herself. If two distinct cows have been in a movie together, each is considered to be one 'degree' away from the other. If a two cows have never worked together but have both worked with a third cow, they are considered to be two 'degrees' away from each other (counted as: one degree to the cow they've worked with and one more to the other cow). This scales to the general case. 

The N (2 <= N <= 300) cows are interested in figuring out which cow has the smallest average degree of separation from all the other cows. excluding herself of course. The cows have made M (1 <= M <= 10000) movies and it is guaranteed that some relationship path exists between every pair of cows. 
Input
* Line 1: Two space-separated integers: N and M 

* Lines 2..M+1: Each input line contains a set of two or more space-separated integers that describes the cows appearing in a single movie. The first integer is the number of cows participating in the described movie, (e.g., Mi); the subsequent Mi integers tell which cows were. 
Output
* Line 1: A single integer that is 100 times the shortest mean degree of separation of any of the cows. 
Sample Input
4 2
3 1 2 3
2 3 4
Sample Output
100
Hint
[Cow 3 has worked with all the other cows and thus has degrees of separation: 1, 1, and 1 -- a mean of 1.00 .] 



#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<string.h>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include<vector>
#include <cmath>
using namespace std;


#define MAXN 305
#define INF 10000000


#define maxn 310
#define INF 10000000


int N,M;
int shu;
int linshi[300];
int map[maxn][maxn];

void Floyd()
{
    for(int i=1; i<=N; i++)
        for(int k=1; k<=N; k++)
            for(int j=1; j<=N; j++)
                {
                        if(j==i||k==i) continue;
                        map[i][j]=min(map[i][j],map[i][k]+map[k][j]);
                }

}

void initialization()
{
    for(int i=0;i<=N;i++)
    {
        for(int j=0;j<=N;j++)
        {
            map[i][j]=INF;
        }
        map[i][i]=0;
    }           //这里我原先写的有问题，不知道怎么改得。
}

int main()
{
        while(~scanf("%d%d",&N,&M))
        {
                initialization();
                int a,b;
                int m=M;
                while(m--)
                {
                        scanf("%d",&shu);  
                        for(int i = 0;i < shu;i++)   //i从零开始。
                        {
                                scanf("%d",&linshi[i]);   
                        }
                        for(int j=0;j<shu;j++)
                        {
                                for(int k=j+1;k<shu;k++)
                                {
                                    map[linshi[j]][linshi[k]]=100;
                                    map[linshi[k]][linshi[j]]=100;
                                }
                        }
                }

                Floyd();
                int minn=INF;
                int pjs=0;
                for(int i = 1;i <= N;i++)
                 {
                         int sum=0;
                         for(int j=1;j<=N;j++)
                         {
                                 if(j==i) continue;
                                 sum+=map[i][j];
                         }
                         minn=min(minn,sum/(N-1));
                 }
                cout<<minn<<endl;
        }
   

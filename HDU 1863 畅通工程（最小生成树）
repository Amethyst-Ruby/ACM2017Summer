
最小生成树：模板应用（4）HDU 1863 畅通工程
  Time Limit:1000MS     Memory Limit:32768KB     64bit IO Format:%I64d & %I64u  

Submit
 
Status
 

 use MathJax to parse formulas


Description


省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。经过调查评估，得到的统计表中列出了有可能建设公路的若干条道路的成本。现请你编写程序，计算出全省畅通需要的最低成本。 


  


Input


测试输入包含若干测试用例。每个测试用例的第1行给出评估的道路条数 N、村庄数目M ( < 100 )；随后的 N 
行对应村庄间道路的成本，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间道路的成本（也是正整数）。为简单起见，村庄从1到M编号。当N为0时，全部输入结束，相应的结果不要输出。 


  


Output


对每个测试用例，在1行里输出全省畅通需要的最低成本。若统计数据不足以保证畅通，则输出“?”。 


  


Sample Input


3 3
1 2 1
1 3 2
2 3 4
1 3
2 3 2
0 100 


  


Sample Output


3
?
        
        
        
    
#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<string.h>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include<vector>
#include <cmath>
using namespace std;

#define M 1000005
#define inf 0x3f3f3f3f
struct edge
{
        int u,v;
        int money;
}eg[M];

int n,m,bcj[M];


bool com(edge a,edge b)
{
        return a.money<b.money;
}

void Init(int m)
{
        for(int i=1;i<=m;i++)
                bcj[i]=i;
}

int Find(int x)
{
        while(bcj[x] != x)
        {
                x=bcj[x];
        }
        return x;
}

void Combine(int a,int b)
{
        int x;
        int y;
        x=Find(a);
        y=Find(b);
        if(x!=y)
                bcj[x]=y;
}

int Kruskal()
{
        int sum_money=0;
        sort(eg,eg+n,com);
        Init(m);

        for(int i=1;i<=n;i++)
        {
                if(Find(eg[i].u) != Find(eg[i].v))
                {
                        Combine(eg[i].u,eg[i].v);
                        sum_money+=eg[i].money;
                }
        }
        return sum_money;
}

int main()
{
       //int n,m;妈的不要加他，查了好几遍就因为这个小局部变量哇啊啊啊啊
       bool cunzai;
       int sum_money;
       while(scanf("%d%d",&n,&m) && n)
       {
               for(int i=1;i<=n;i++)
               {
                       scanf("%d%d%d",&eg[i].u,&eg[i].v,&eg[i].money);
               }
               sum_money=Kruskal();
               cunzai=true;
               for(int i=2;i<=m;i++)
                       if( Find(1)  !=  Find(i) )
                       {
                               cunzai=false;
                               break;
                       }
                if(cunzai) printf("%d\n",sum_money);    //这里不能直接写kruskal(),我本意想跳过那个变量。
                else printf("?\n");
       }
       return 0;
}



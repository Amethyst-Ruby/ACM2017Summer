hdu1392
Surround the Trees

Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 11510    Accepted Submission(s): 4450


Problem Description
There are a lot of trees in an area. A peasant wants to buy a rope to surround all these trees. So at first he must know the minimal required length of the rope. However, he does not know how to calculate it. Can you help him? 
The diameter and length of the trees are omitted, which means a tree can be seen as a point. The thickness of the rope is also omitted which means a rope can be seen as a line.




There are no more than 100 trees.
 

Input
The input contains one or more data sets. At first line of each input data set is number of trees in this data set, it is followed by series of coordinates of the trees. Each coordinate is a positive integer pair, and each integer is less than 32767. Each pair is separated by blank.

Zero at line for number of trees terminates the input for your program.
 

Output
The minimal length of the rope. The precision should be 10^-2.
 

Sample Input
9 
12 7 
24 9 
30 5 
41 9 
80 7 
50 87 
22 9 
45 1 
50 7 
0 
 

Sample Output
243.06

#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<string.h>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include<vector>
#include <cmath>
using namespace std;

#define INF 0x3f3f3f3f
#define maxn 50000+50

struct point
{
    int x,y;
};
point  vex[1000];
point  stackk[1000];

int cross(point a,point b,point c)
{
    return (b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y);
}  //叉积

double dis(point a,point b)
{
    return sqrt((a.x-b.x)*(a.x-b.x)*1.0+(a.y-b.y)*(a.y-b.y));
}

bool cmp(point a,point b)
{
    int m=cross(vex[0],a,b);//按逆时针点的顺序排列
    if(m==0)
        return dis(vex[0],a)-dis(vex[0],b)<=0?true:false;  //如果在同一条线上,距离小的那个点先去排列
    else
        return m>0?true:false;
}

bool cmp1(point a,point b)
{
    if(a.y==b.y)
        return a.x<b.x;
    else
        return a.y<b.y;
}
int t;
int main()
{

    while(scanf("%d",&t),t!=0)
    {
        int i;
        for(i=0; i<t; i++)
        {
            scanf("%d%d",&vex[i].x,&vex[i].y);
        }
        if(t==1)
            printf("%.2f\n",0.00);
        else if(t==2)
            printf("%.2f\n",dis(vex[0],vex[1]));
        else
        {
            sort(vex,vex+t,cmp1);   
            sort(vex+1,vex+t,cmp);
            memset(stackk,0,sizeof(stackk));
            stackk[0]=vex[0];
            stackk[1]=vex[1];
            int top=1;
            for(i=2; i<t; i++)
            {
                while(i>=1&&cross(stackk[top-1],stackk[top],vex[i])<0)
                    top--;
                stackk[++top]=vex[i];
            }
            double s=0;
            for(i=1; i<=top; i++)
                s += dis(stackk[i-1],stackk[i]);
            s+=dis(stackk[top],vex[0]);
            printf("%.2f\n",s);
        }
    }
    return 0;
}
